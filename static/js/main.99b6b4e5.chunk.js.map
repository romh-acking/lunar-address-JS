{"version":3,"sources":["context/theme/reducer.js","context/theme/context.js","_layout.js","context/snackbar/snackbar.js","context/snackbar/configureStore.js","lib/romType.js","lib/autodetect.js","lib/conversion/HexConversion.js","lib/localStorage.js","pages/aboutModal.js","pages/mainPage.js","lib/conversion/AddressLoROM1.js","lib/conversion/AddressLoROM2.js","lib/conversion/AddressHiROM.js","lib/conversion/AddressExLoROM.js","lib/conversion/AddressExHiROM.js","lib/conversion/AddressRAMZSNES.js","lib/conversion/AddressVRAMZSNES.js","components/Snackbar.jsx","App.js","index.js"],"names":["themeReducer","state","type","switched","theme","Error","createContext","require","initializer","localStorage","getItem","JSON","parse","ThemeStateContext","ThemeDispatchContext","useThemeState","useContext","ThemeProvider","children","useReducer","dispatch","useEffect","setItem","stringify","Provider","value","light","palette","dark","primary","main","Layout","lightTheme","createMuiTheme","darkTheme","CssBaseline","Container","maxWidth","Box","marginTop","SET_SNACKBAR","initialState","snackbarOpen","snackbarType","snackbarMessage","setSnackbar","reducer","combineReducers","snackbar","action","store","createStore","romType","Position","romData","ReadUInt16","length","subslice","Uint8Array","slice","uint","ReadByte","retVal","decToHex","decAddr","hiLo","toString","toUpperCase","padStart","hexToDec","hexString","replace","parseInt","setLocalLastChangedIsPCAddress","setLocalLastChangedAddress","AlertDialog","React","useState","open","setOpen","handleClose","Button","variant","color","onClick","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","style","textAlign","DialogActions","autoFocus","useStyles","makeStyles","formControl","minWidth","paper","padding","spacing","margin","img","width","divider","marginBottom","romTypesDropdownItems","label","Users","classes","dispatchTheme","useDispatch","pcAddress","setPcAddress","snesAddress","setSnesAddress","romTypeDropdown","setRomTypeDropdown","lastChangedIsPCAddress","setLastChangedIsPCAddress","isMounted","setIsmounted","onSnesAddressChange","addressType","ret","decimal","SnesAddress","IsValidPcAddress","PcAddress","addressLoROM1SnesToPc","addressLoROM2SnesToPc","addressHiROMSnesToPc","addressExLoROMSnesToPc","addressExHiROMSnesToPc","addressRAMSnesToPc","addressVRAMSnesToPc","onPcAddressChange","addressLoROM1PcToSnes","addressLoROM2PcToSnes","addressHiROMPcToSnes","addressExLoROMPcToSnes","addressExHiROMPcToSnes","addressRAMPcToSnes","addressVRAMPcToSnes","lastChangedIsPCAddress_","undefined","getLocalLastChangedIsPCAddress","romTypeDropdown_","getLocalRomTypeDropdown","lastChangedAddress_","getLocalLastChangedAddress","Paper","className","Grid","container","justify","alignItems","item","Typography","gutterBottom","htmlFor","display","name","accept","onChange","event","file","target","files","reader","FileReader","onload","buffer","result","identifiedRomType","romData_","ptr","autodetect","Int8Array","readAsArrayBuffer","component","IconButton","md","FormControl","InputLabel","Select","map","x","MenuItem","TextField","e","root","CustomizedSnackbars","useSelector","reason","Snackbar","autoHideDuration","Alert","elevation","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.99b6b4e5.chunk.js","sourcesContent":["export const themeReducer = (state, { type }) => {\n  switch (type) {\n    case \"TOGGLE_THEME\":\n      return {\n        ...state,\n        switched: state.switched + 1,\n        theme: state.theme === \"light\" ? \"dark\" : \"light\",\n      };\n    default:\n      throw new Error(`Unhandled action type: ${type}`);\n  }\n};\n","import React, { useContext, useEffect, useReducer } from \"react\";\n\nimport { themeReducer } from \"./reducer\";\n\nconst { createContext } = require(\"react\");\n\nconst initialState = {\n  switched: 0,\n  theme: \"dark\",\n};\n\nconst initializer = localStorage.getItem(\"theme\")\n  ? JSON.parse(localStorage.getItem(\"theme\"))\n  : initialState;\n\nconst ThemeStateContext = createContext();\nconst ThemeDispatchContext = createContext();\n\nexport const useThemeState = () => useContext(ThemeStateContext);\nexport const useThemeDispatch = () => useContext(ThemeDispatchContext);\n\nexport const ThemeProvider = ({ children }) => {\n  const [theme, dispatch] = useReducer(themeReducer, initializer);\n\n  // Persist state on each update\n  useEffect(() => {\n    localStorage.setItem(\"theme\", JSON.stringify(theme));\n  }, [theme]);\n\n  return (\n    <ThemeStateContext.Provider value={theme}>\n      <ThemeDispatchContext.Provider value={dispatch}>\n        {children}\n      </ThemeDispatchContext.Provider>\n    </ThemeStateContext.Provider>\n  );\n};\n","import {\n  Box,\n  Container,\n  CssBaseline,\n  ThemeProvider,\n  createMuiTheme,\n} from \"@material-ui/core\";\n\nimport React from \"react\";\nimport { useThemeState } from \"./context/theme\";\n\nexport const light = {\n  palette: {\n    type: \"light\",\n  }\n};\n\nexport const dark = {\n  palette: {\n    type: \"dark\",\n    primary: {\n      main: '#7289da'\n    }\n  }\n};\n\nexport default function Layout({ children }) {\n  const { theme } = useThemeState();\n\n  const lightTheme = createMuiTheme(light);\n  const darkTheme = createMuiTheme(dark);\n\n  return (\n    <ThemeProvider theme={theme === \"light\" ? lightTheme : darkTheme}>\n      <CssBaseline />\n      <Container maxWidth=\"md\">\n        <Box marginTop={2}>{children}</Box>\n      </Container>\n    </ThemeProvider>\n  );\n}","export const SET_SNACKBAR = \"SET_SNACKBAR\";\r\n\r\nconst initialState = {\r\n  snackbarOpen: false,\r\n  snackbarType: \"success\",\r\n  snackbarMessage: \"\"\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_SNACKBAR:\r\n      const { snackbarOpen, snackbarMessage, snackbarType } = action;\r\n      return {\r\n        ...state,\r\n        snackbarOpen,\r\n        snackbarType,\r\n        snackbarMessage\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setSnackbar = (\r\n  snackbarOpen,\r\n  snackbarType = \"success\",\r\n  snackbarMessage = \"\"\r\n) => ({\r\n  type: SET_SNACKBAR,\r\n  snackbarOpen,\r\n  snackbarType,\r\n  snackbarMessage\r\n});\r\n","import { combineReducers, createStore } from \"redux\";\r\nimport snackbarReducer from \"./snackbar\";\r\n\r\nconst reducer = combineReducers({\r\n  snackbar: snackbarReducer\r\n});\r\n\r\nconst store = createStore(reducer, {});\r\n\r\nexport default store;\r\n","export const romType = {\n    LoROM1: 'LoROM1',\n    LoROM2: 'LoROM2',\n    HiROM: 'HiROM',\n    ExLoROM: 'ExLoROM',\n    ExHiROM: 'ExHiROM',\n    RAM: 'RAM',\n    VRAM: 'VRAM',\n    Invalid: 'Invalid'\n  };","import { romType } from \"./romType\"\n\nlet Position = 0;\nlet romData = null\n\nexport function autodetect(romData_) {\n    let identifiedRomType;\n    let ptr = 0;\n\n    romData = romData_;\n\n    if (romData.length < 0x10000){\n        identifiedRomType = romType.Invalid;\n        return identifiedRomType;\n    }\n\n    Position = 0x7FDC;\n\n    if ((ReadUInt16() ^ ReadUInt16()) === 0xFFFF)\n    {\n        Position = 0x7FD5;\n        ptr = ReadByte();\n    }\n    else\n    {\n        Position = 0xFFDC;\n\n        if ((ReadUInt16() ^ ReadUInt16()) !== 0xFFFF)\n        {\n            identifiedRomType = romType.Invalid;\n            return identifiedRomType;\n        }\n        Position = 0xFFD5;\n        ptr = ReadByte();\n    }\n\n    if ((ptr & 0xF) === 5)\n    {\n        identifiedRomType = romType.ExHiROM;\n    }\n    else if ((ptr & 0xF) === 3)\n    {\n        identifiedRomType = romType.HiROM;\n    }\n    else if ((ptr & 1) === 1)\n    {\n        if (romData.length <= 0x400000)\n        {\n            identifiedRomType = romType.HiROM;\n        }\n        else\n        {\n            identifiedRomType = romType.ExHiROM;\n        }\n    }\n    else if (romData.length <= 0x400000)\n    {\n        identifiedRomType = (ptr >> 4) >= 3 ? romType.LoROM2 : romType.LoROM1;\n    }\n    else\n    {\n        identifiedRomType = romType.ExLoROM;\n    }\n    return identifiedRomType;\n}\n\nfunction ReadUInt16() {\n    const size = 2;\n\n    if (Position + size > romData.length) {\n        throw new Error(\"Location outside bounds of rom\");\n    }\n\n    let subslice = new Uint8Array(romData.slice(Position, Position + size));\n    let uint = (subslice[0] << 8) + subslice[1];\n    Position += size;\n\n    return uint;\n}\n\n\nfunction ReadByte() {\n    const size = 1;\n\n    if (Position + size > romData.length){\n        throw new Error(\"Location outside bounds of rom\");\n    }\n    let retVal = new Uint8Array(romData.slice(Position, Position + size))[0];\n    Position += size;\n\n    return retVal;\n}\n","  export function decToHex(decAddr){\n    let bank = (decAddr & 0xFF0000) >> 16;\n    let hiLo = (decAddr & 0x00FFFF);\n\n    return `$${bank.toString(16).toUpperCase().padStart(2, \"0\")}:${hiLo.toString(16).toUpperCase().padStart(4, \"0\")}`;\n  }\n\n  export function hexToDec(hexString){\n    hexString = hexString.replace(/[^0-9a-fA-F]+/g, \"\");\n    return parseInt(hexString, 16);\n  }","import { romType } from \"./romType\"\n\nexport function getLocalLastChangedIsPCAddress() {\n    let lastChangedIsPCAddress = localStorage.getItem('lastChangedIsPCAddress');\n\n    lastChangedIsPCAddress = (lastChangedIsPCAddress === null || lastChangedIsPCAddress === undefined || lastChangedIsPCAddress === \"true\");\n\n    return lastChangedIsPCAddress;\n}\n\nexport function setLocalLastChangedIsPCAddress(value) {\n    localStorage.setItem('lastChangedIsPCAddress', value);\n}\n\nexport function getLocalLastChangedAddress(){\n    let lastChangedAddress_ = localStorage.getItem('lastChangedAddress');\n\n    if (lastChangedAddress_ === null){\n      lastChangedAddress_ = \"$00:0000\";\n    }\n\n    return lastChangedAddress_;\n}\n\nexport function setLocalLastChangedAddress(value) {\n    localStorage.setItem('lastChangedAddress', value);\n}\n\n\nexport function getLocalRomTypeDropdown(){\n    let romTypeDropdown_ = localStorage.getItem('romTypeDropdown');\n\n    if (romTypeDropdown_ === null){\n        romTypeDropdown_ = romType.LoROM1;\n    }\n\n    return romTypeDropdown_;\n}\n\nexport function setLocalRomTypeDropdown(value) {\n    localStorage.setItem('romTypeDropdown', value);\n}","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nexport default function AlertDialog() {\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <Button variant=\"primary\" color=\"primary\" onClick={handleClickOpen}>\n      About\n      </Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{\"About\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\" style={{textAlign: 'center'}}>\n            This program is not endorsed or supported by Nintendo, and the author is not affiliated with any other corporate entity.<br/>\n            The program is freeware and provided \"AS IS\"...<br/>\n            The author cannot be held liable for damages of any kind arising from its use or presence.<br/><br/>\n            JavaScript Port Based on this Disassembled Version with IDA Pro:<br/>\n            Version 1.04<br/>\n            Public Build --- Aug  5 2010<br/><br/>\n            Originally By: FuSoYa<br/>\n            Ported and Reverse Engineered By: FCandChill\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}","import { Button, Grid,  Paper, Typography, makeStyles, Container,} from \"@material-ui/core\";\nimport Brightness4Icon from \"@material-ui/icons/Brightness4\";\nimport Brightness7Icon from \"@material-ui/icons/Brightness7\";\nimport React, { useEffect, useState } from 'react';\nimport { useThemeDispatch } from \"../context/theme/context\";\nimport { useThemeState } from \"../context/theme\";\nimport IconButton from '@material-ui/core/IconButton';\nimport TextField from '@material-ui/core/TextField';\nimport { useDispatch } from \"react-redux\";\nimport { setSnackbar } from \"../context/snackbar/snackbar\";\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nimport { romType } from \"../lib/romType\"\nimport { autodetect } from \"../lib/autodetect\"\nimport { decToHex, hexToDec } from \"../lib/conversion/HexConversion\"\n\nimport { PcToSnes as addressLoROM1PcToSnes, SnesToPc as addressLoROM1SnesToPc } from \"../lib/conversion/AddressLoROM1\"\nimport { PcToSnes as addressLoROM2PcToSnes, SnesToPc as addressLoROM2SnesToPc } from \"../lib/conversion/AddressLoROM2\"\nimport { PcToSnes as addressHiROMPcToSnes, SnesToPc as addressHiROMSnesToPc } from \"../lib/conversion/AddressHiROM\"\nimport { PcToSnes as addressExLoROMPcToSnes, SnesToPc as addressExLoROMSnesToPc } from \"../lib/conversion/AddressExLoROM\"\nimport { PcToSnes as addressExHiROMPcToSnes, SnesToPc as addressExHiROMSnesToPc } from \"../lib/conversion/AddressExHiROM\"\nimport { PcToSnes as addressRAMPcToSnes, SnesToPc as addressRAMSnesToPc } from \"../lib/conversion/AddressRAMZSNES\"\nimport { PcToSnes as addressVRAMPcToSnes, SnesToPc as addressVRAMSnesToPc } from \"../lib/conversion/AddressVRAMZSNES\"\n\nimport { \n  getLocalLastChangedIsPCAddress, setLocalLastChangedIsPCAddress,\n  getLocalLastChangedAddress, setLocalLastChangedAddress,\n  getLocalRomTypeDropdown, setLocalRomTypeDropdown\n\n} from \"../lib/localStorage\"\n\nimport AlertDialog from \"./aboutModal\"\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    minWidth: 120,\n    maxWidth: 300,\n  },\n  paper: {\n    padding: theme.spacing(4),\n    margin: \"auto\",\n  },\n  img: {\n    width: \"100%\",\n  },\n  divider: {\n    marginBottom: theme.spacing(2),\n  },\n}));\n\nconst romTypesDropdownItems = [\n  { id: romType.LoROM1, label: 'LoROM: 00:8000 - 6F:FFFF' },\n  { id: romType.LoROM2, label: 'LoROM: 80:8000 - FF:FFFF' },\n  { id: romType.HiROM, label: 'HiROM: C0:0000 - FF:FFFF' },\n  { id: romType.ExLoROM, label: 'ExLoROM: 80:8000 - FF:FFFF & 00:8000 - 7D:FFFF' },\n  { id: romType.ExHiROM, label: 'ExHiROM: C0:0000 - FF:FFFF & 40:0000 - 7D:FFFF' },\n  { id: romType.RAM, label: 'RAM: 7E:0000 - 7F:FFFF' },\n  { id: romType.VRAM, label: 'VRAM: 0000 - FFFF' }\n];\n\nexport default function Users() {\n  const classes = useStyles();\n\n  const { theme } = useThemeState();\n  const dispatchTheme = useThemeDispatch();\n\n  const _toggleTheme = () => dispatchTheme({ type: \"TOGGLE_THEME\" });\n\n  const dispatch = useDispatch();\n\n  const [pcAddress, setPcAddress] = useState(\"$00:0000\");\n  const [snesAddress, setSnesAddress] = useState(\"$00:0000\");\n  const [romTypeDropdown, setRomTypeDropdown] = React.useState(romType.LoROM1);\n  const [lastChangedIsPCAddress, setLastChangedIsPCAddress] = React.useState(true);\n\n  const [isMounted, setIsmounted] = React.useState(false);\n\n  function onSnesAddressChange(value, addressType) {\n      setSnesAddress(value);\n\n      setLocalLastChangedIsPCAddress(false);\n      setLocalLastChangedAddress(value)\n\n      setLastChangedIsPCAddress(false);\n      let decimal = hexToDec(value)\n\n      let ret;\n      switch(addressType) {\n        case romType.LoROM1:\n          ret = addressLoROM1SnesToPc(decimal);\n          break;\n        case romType.LoROM2:\n          ret = addressLoROM2SnesToPc(decimal);\n          break;\n        case romType.HiROM:\n          ret = addressHiROMSnesToPc(decimal);\n          break;\n        case romType.ExLoROM:\n          ret = addressExLoROMSnesToPc(decimal);\n          break;\n        case romType.ExHiROM:\n          ret = addressExHiROMSnesToPc(decimal);\n          break;\n        case romType.RAM:\n          ret = addressRAMSnesToPc(decimal);\n          break;\n        case romType.VRAM:\n          ret = addressVRAMSnesToPc(decimal);\n          break;\n        default:\n          dispatch(\n            setSnackbar(\n              true,\n              \"error\",\n              \"Invalid rom type:\"\n            )\n          )\n          return;\n      }\n\n      setPcAddress(decToHex(ret[0]));\n\n      if (!ret[1]){\n        dispatch(\n          setSnackbar(\n            true,\n            \"error\",\n            \"Invalid SNES address\"\n          )\n        )\n      }\n  }\n\n  function onPcAddressChange(value, addressType) {\n      setPcAddress(value);\n\n      setLocalLastChangedIsPCAddress(true);\n      setLocalLastChangedAddress(value)\n\n      setLastChangedIsPCAddress(true);\n      let decimal = hexToDec(value);\n      let ret;\n      switch(addressType) {\n        case romType.LoROM1:\n          ret = addressLoROM1PcToSnes(decimal);\n          break;\n        case romType.LoROM2:\n          ret = addressLoROM2PcToSnes(decimal);\n          break;\n        case romType.HiROM:\n          ret = addressHiROMPcToSnes(decimal);\n          break;\n        case romType.ExLoROM:\n          ret = addressExLoROMPcToSnes(decimal);\n          break;\n        case romType.ExHiROM:\n          ret = addressExHiROMPcToSnes(decimal);\n          break;\n        case romType.RAM:\n          ret = addressRAMPcToSnes(decimal);\n          break;\n        case romType.VRAM:\n          ret = addressVRAMPcToSnes(decimal);\n          break;\n        default:\n          dispatch(\n            setSnackbar(\n              true,\n              \"error\",\n              \"Invalid rom type\"\n            )\n          )\n          return;\n      }\n\n      setSnesAddress(decToHex(ret[0]));\n      \n      if (!ret[1]){\n        dispatch(\n          setSnackbar(\n            true,\n            \"error\",\n            \"Invalid PC address\"\n          )\n        )\n      }\n  }\n  \n\n  const handleChange = (event) => {\n    setRomTypeDropdown(event.target.value);\n  };\n\n  useEffect(() => {\n    if (isMounted) {\n      setLocalRomTypeDropdown(romTypeDropdown);\n\n      if (lastChangedIsPCAddress) {\n        onPcAddressChange(pcAddress, romTypeDropdown);\n      } \n      else {\n        onSnesAddressChange(snesAddress, romTypeDropdown);\n      }\n    }\n  // eslint-disable-next-line\n  }, [ romTypeDropdown ]);\n\n  useEffect(() => {\n    let lastChangedIsPCAddress_ = getLocalLastChangedIsPCAddress()\n    setLastChangedIsPCAddress(lastChangedIsPCAddress_);\n\n    let romTypeDropdown_ = getLocalRomTypeDropdown()\n    setRomTypeDropdown(romTypeDropdown_);\n\n    let lastChangedAddress_ = getLocalLastChangedAddress();\n\n    if (lastChangedIsPCAddress_) {\n      onPcAddressChange(lastChangedAddress_, romTypeDropdown_);\n    } else {\n      onSnesAddressChange(lastChangedAddress_, romTypeDropdown_);\n    }\n\n    setIsmounted(true);\n\n  // eslint-disable-next-line\n  }, [ ]);\n\n\tconst changeHandlerAutoDetect = (event) => {\n\t\tlet file = event.target.files[0];\n\n    const reader = new FileReader()\n\n    reader.onload = event => {\n      const buffer = reader.result;\n      const data = new Int8Array(buffer);\n      let identifiedRomType = autodetect(data);\n\n      if (identifiedRomType !== romType.Invalid) {\n        setRomTypeDropdown(identifiedRomType);\n\n        dispatch(\n          setSnackbar(\n            true,\n            \"success\",\n            `ROM memory map type indentified as: ${identifiedRomType}`\n          )\n        )\n      } else {\n        dispatch(\n          setSnackbar(\n            true,\n            \"error\",\n            \"Cannot determine ROM memory map type.\"\n          )\n        )\n      }\n    }\n\n    reader.readAsArrayBuffer(file);\n\t};\n\n  return (\n    <>\n      <Paper className={classes.paper}>\n        <Grid container justify=\"space-between\" alignItems=\"flex-start\">\n          <Grid item>\n            <Typography gutterBottom variant=\"h4\">\n              Lunar Address JS\n            </Typography>\n          </Grid>\n\n          <Grid item>\n            <Grid container spacing={4} alignItems=\"center\">\n              <Grid item>\n              <label htmlFor=\"upload-photo\">\n                <input\n                  style={{ display: 'none' }}\n                  id=\"upload-photo\"\n                  name=\"upload-photo\"\n                  accept=\".smc,.sfc\"\n                  type=\"file\"\n                  onChange={changeHandlerAutoDetect} \n                />\n\n                <Button color=\"primary\" variant=\"contained\" component=\"span\">\n                  Auto-Detect Type\n                </Button>\n              </label>\n\n              </Grid>\n              \n              <Grid item>\n                <AlertDialog />\n              </Grid>\n              \n              <Grid item>\n                <IconButton onClick={_toggleTheme}>\n                { theme === \"light\" ? <Brightness7Icon /> : <Brightness4Icon /> }\n                </IconButton>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Paper>\n\n      <br/>\n\n      <Paper className={classes.paper}>\n        <>\n          <Container>\n             <Grid container spacing={6}>\n               <Grid item md={12}>\n                 <FormControl className={classes.formControl} variant=\"filled\">\n                   <InputLabel>SNES ROM Type</InputLabel>\n                   <Select value={romTypeDropdown} onChange={handleChange}>\n                     {romTypesDropdownItems.map((x) => (\n                         <MenuItem key={x.id} value={x.id}>{x.label}</MenuItem>\n                     ))}\n                   </Select>\n                 </FormControl>\n               </Grid>\n                <Grid item md={6}>\n                 <TextField\n                   label=\"PC Address\"\n                   variant=\"filled\"\n                   value={pcAddress}\n                   onChange={ (e) => onPcAddressChange(e.target.value, romTypeDropdown) }\n                 />\n               </Grid>\n               <Grid item md={6}>\n                <TextField\n                  label=\"SNES Address\"\n                  variant=\"filled\"\n                  value={snesAddress}\n                  onChange={ (e) => onSnesAddressChange(e.target.value, romTypeDropdown) }\n                />\n              </Grid>\n            </Grid>\n          </Container>\n        </>\n      </Paper>\n    </>\n  );\n}","export function PcToSnes(PcAddress) {\n    let SnesAddress = 0;\n    let IsValidPcAddress;\n\n    if (PcAddress >= 0x400000)\n    {\n        IsValidPcAddress = false;\n    }\n    else\n    {\n        IsValidPcAddress = true;\n        SnesAddress = PcAddress << 1;\n        SnesAddress &= 0x7F0000;\n        SnesAddress |= (PcAddress | 0x8000) & 0xFFFF;\n\n        if (PcAddress > 0x380000)\n        {\n            SnesAddress += 0x800000;\n        }\n    }\n    \n    return [SnesAddress, IsValidPcAddress];\n}\n\nexport function SnesToPc(SnesAddress) {\n    let PcAddress = 0;\n    let IsValidPcAddress;\n\n    if (SnesAddress >= 0x8000 && SnesAddress <= 0x6FFFFF)\n    {\n        IsValidPcAddress = true;\n        PcAddress = (SnesAddress & 0x7FFF | ((SnesAddress & 0x7F0000) >> 1));\n    }\n    else\n    {\n        IsValidPcAddress = false;\n    }\n\n    return [PcAddress, IsValidPcAddress];\n}","export function PcToSnes(PcAddress) {\n    let SnesAddress = 0;\n    let IsValidPcAddress;\n\n    if (PcAddress >= 0x400000)\n    {\n        IsValidPcAddress = false;\n    }\n    else\n    {\n        IsValidPcAddress = true;\n        SnesAddress = (((PcAddress << 1) & 0x7F0000) | ((PcAddress | 0x8000) & 0xFFFF)) + 0x800000;\n    }\n    \n    return [SnesAddress, IsValidPcAddress];\n}\n\nexport function SnesToPc(SnesAddress) {\n    let PcAddress = 0;\n    let IsValidPcAddress;\n\n    if (SnesAddress >= 0x808000 && SnesAddress <= 0xFFFFFF)\n    {\n        IsValidPcAddress = true;\n        PcAddress = (SnesAddress & 0x7FFF | ((SnesAddress & 0x7F0000) >> 1));\n    }\n    else\n    {\n        IsValidPcAddress = false;\n    }\n\n    return [PcAddress, IsValidPcAddress];\n}","export function PcToSnes(PcAddress) {\n    let SnesAddress = 0;\n    let IsValidPcAddress;\n\n    if (PcAddress >= 0x400000)\n    {\n        IsValidPcAddress = false;\n    }\n    else\n    {\n        IsValidPcAddress = true;\n        SnesAddress = PcAddress | 0xC00000;\n    }\n    return [SnesAddress, IsValidPcAddress];\n}\n\nexport function SnesToPc(SnesAddress) {\n    let PcAddress = 0;\n    let IsValidPcAddress;\n\n    if ((SnesAddress >= 0xC00000 && SnesAddress <= 0xFFFFFF))\n    {\n        IsValidPcAddress = true;\n        PcAddress = (SnesAddress & 0x3FFFFF);\n    }\n    else\n    {\n        IsValidPcAddress = false;\n    }\n\n    return [PcAddress, IsValidPcAddress];\n}","export function PcToSnes(PcAddress) {\n    let SnesAddress = 0;\n    let IsValidPcAddress;\n\n    if (PcAddress >= 0x7F0000)\n    {\n        IsValidPcAddress = false;\n    }\n    else\n    {\n        IsValidPcAddress = true;\n        SnesAddress = PcAddress << 1;\n        SnesAddress &= 0x7F0000;\n        SnesAddress |= (PcAddress | 0x8000) & 0xFFFF;\n\n        if (PcAddress < 0x400000)\n        {\n            SnesAddress += 0x800000;\n        }\n    }\n    return [SnesAddress, IsValidPcAddress];\n}\n\nexport function SnesToPc(SnesAddress) {\n    let PcAddress = 0;\n    let IsValidPcAddress;\n\n    if ((SnesAddress >= 0x808000 && SnesAddress <= 0xFFFFFF) || (SnesAddress >= 0x008000 && SnesAddress <= 0x7dffff))\n    {\n        IsValidPcAddress = true;\n\n        PcAddress = (SnesAddress & 0x7FFF | ((SnesAddress & 0x7F0000) >> 1));\n\n        if (SnesAddress < 0x800000)\n        {\n            PcAddress += 0x400000;\n        }\n    }\n    else\n    {\n        IsValidPcAddress = false;\n    }\n\n    return [PcAddress, IsValidPcAddress];\n}","export function PcToSnes(PcAddress) {\n    let SnesAddress = 0;\n    let IsValidPcAddress;\n\n    if (PcAddress >= 0x7E0000)\n    {\n        IsValidPcAddress = false;\n    }\n    else\n    {\n        IsValidPcAddress = true;\n\n        SnesAddress = PcAddress;\n        if (PcAddress < 0x400000)\n        {\n            SnesAddress |= 0xC00000;\n        }\n\n        if (PcAddress >= 0x7E0000)\n        {\n            SnesAddress -= 0x400000;\n        }\n    }\n    return [SnesAddress, IsValidPcAddress];\n}\n\nexport function SnesToPc(SnesAddress) {\n    let PcAddress = 0;\n    let IsValidPcAddress;\n\n    if ((SnesAddress >= 0xC00000 && SnesAddress <= 0xFFFFFF) || (SnesAddress >= 0x400000 && SnesAddress <= 0x7DFFFF))\n    {\n        IsValidPcAddress = true;\n        PcAddress = SnesAddress & 0x3FFFFF;\n\n        if (SnesAddress < 0xC00000)\n        {\n            PcAddress += 0x400000;\n        }\n    }\n    else\n    {\n        IsValidPcAddress = false;\n    }\n\n    return [PcAddress, IsValidPcAddress];\n}","export function PcToSnes(PcAddress) {\n    let SnesAddress = 0;\n    let IsValidPcAddress;\n\n    if (PcAddress < 0xC13 || PcAddress >= 0x20C13)\n    {\n        IsValidPcAddress = false;\n    }\n    else\n    {\n        IsValidPcAddress = true;\n        SnesAddress = PcAddress - 0xC13 + 0x7E0000;\n    }\n    \n    return [SnesAddress, IsValidPcAddress];\n}\n\nexport function SnesToPc(SnesAddress) {\n    let PcAddress = 0;\n    let IsValidPcAddress;\n\n    if (SnesAddress >= 0x7E0000 && SnesAddress <= 0x7FFFFF)\n    {\n        IsValidPcAddress = true;\n        PcAddress = (0x1FFFF & SnesAddress) + 0xC13;\n    }\n    else\n    {\n        IsValidPcAddress = false;\n    }\n\n    return [PcAddress, IsValidPcAddress];\n}","export function PcToSnes(PcAddress) {\n    let SnesAddress = 0;\n    let IsValidPcAddress;\n\n    if (!(PcAddress >= 0x20C13 && PcAddress < 0x30C13))\n    {\n        IsValidPcAddress = false;\n    }\n    else\n    {\n        IsValidPcAddress = true;\n        SnesAddress = (PcAddress - 0x20C13) >> 1;\n    }\n    \n    return [SnesAddress, IsValidPcAddress];\n}\n\nexport function SnesToPc(SnesAddress) {\n    let PcAddress = 0;\n    let IsValidPcAddress;\n\n    if (SnesAddress >= 0x0000 && SnesAddress < 0x8000)\n    {\n        IsValidPcAddress = true;\n        PcAddress = (SnesAddress << 1) + 0x20C13;\n\n    }\n    else \n    {\n        IsValidPcAddress = false;\n    }\n\n    return [PcAddress, IsValidPcAddress];\n}","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { setSnackbar } from \"../context/snackbar/snackbar\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: \"100%\",\r\n    \"& > * + *\": {\r\n      marginTop: theme.spacing(2)\r\n    }\r\n  }\r\n}));\r\n\r\nconst CustomizedSnackbars = () => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const snackbarOpen = useSelector(state => state.snackbar.snackbarOpen);\r\n  const snackbarType = useSelector(state => state.snackbar.snackbarType);\r\n  const snackbarMessage = useSelector(state => state.snackbar.snackbarMessage);\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    dispatch(setSnackbar(false, snackbarType, snackbarMessage));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Snackbar\r\n        open={snackbarOpen}\r\n        autoHideDuration={3000}\r\n        onClose={handleClose}\r\n      >\r\n        <Alert\r\n          elevation={6}\r\n          variant=\"filled\"\r\n          onClose={handleClose}\r\n          color={snackbarType}\r\n        >\r\n          {snackbarMessage}\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomizedSnackbars;\r\n","import { Route, BrowserRouter as Router, Switch } from \"react-router-dom\";\n\nimport Layout from \"./_layout\";\nimport { ThemeProvider } from \"./context/theme\";\nimport { Provider } from \"react-redux\";\nimport store from \"./context/snackbar/configureStore\";\n\nimport MainPage from \"./pages/mainPage\";\nimport Snackbar from \"./components/Snackbar\";\nfunction App() {\n  return (\n    <>\n      <ThemeProvider>\n        <Provider store={store}>\n          <Layout>\n            <Router>\n              <Switch>\n                <Route path=\"/\">\n                <Snackbar />\n                  <MainPage />\n                </Route>\n                {/* Add more routes here */}\n              </Switch>\n            </Router>\n          </Layout>\n        </Provider>\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default App;\n","import App from \"./App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}